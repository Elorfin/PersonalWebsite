#!/usr/bin/env node

/* global require */

const fs = require('fs')
const path = require('path')

const SRC_DIR  = path.resolve('app/Resources/models')
const DEST_DIR = path.resolve('web/dist/models')

const IMPORT_FILES = {
  /*'.js': 'models',
  '.json': 'models',*/
  '.png': 'textures',
  '.jpg': 'textures',
  '.jpeg': 'textures',
  '.wav': 'audios',
  '.mp3': 'audios'
}

const mapping = {
  /*models: {},*/
  textures: {},
  audios: {}
}

createDestination()
publishModels(SRC_DIR)

function createDestination() {
  if (!fs.existsSync(DEST_DIR)) {
    fs.mkdirSync(DEST_DIR)
  }

  if (!fs.existsSync(path.resolve(DEST_DIR, 'files'))) {
    fs.mkdirSync(path.resolve(DEST_DIR, 'files'))
  }
}

function publishModels(currentPath) {
  console.log('Publish models for path : '+currentPath)

  fs.readdir(currentPath, (err, items) => {
    items.map(item => {
      const itemPath = path.resolve(currentPath, item)

      if (fs.lstatSync(itemPath).isDirectory()) {
        // recursive process child directories
        publishModels(itemPath)
      } else {
        const ext = path.extname(item)
        const baseName = path.basename(item)

        if (IMPORT_FILES[ext] && 0 !== baseName.indexOf('UV_')) {
          const name = baseName.slice(0, -(ext.length))

          // because the blender exporter I use has wrong ext
          const destName = name+('.js' === ext ? '.json':ext)

          const itemDest = path.resolve(DEST_DIR, 'files', destName)

          console.log('Publish file "'+itemPath+'" to "'+itemDest+'" as "'+IMPORT_FILES[ext]+'".')

          // copy file in public dir
          fs
            .createReadStream(itemPath)
            .pipe(
              fs.createWriteStream(itemDest)
            )

          if (mapping[IMPORT_FILES[ext]][name]) {
            // a file with the same name has already been published
            // it's a problem because dir structure is flattened in the public dir
            throw new Error('Duplicated asset name : '+baseName)
          }

          // add published file to mapping
          mapping[IMPORT_FILES[ext]][name] = './dist/models/files/'+destName

          dumpMapping()
        }
      }
    })
  })
}

function dumpMapping() {
  fs.writeFileSync(path.resolve(DEST_DIR, 'mapping.json'), JSON.stringify(mapping, null, 2))
}
